#=========================================================================
# Modular C++ Build System Subproject Makefile Fragment
#=========================================================================
# Please read the documenation in 'mcppbs-uguide.txt' for more details
# on how the Modular C++ Build System works.

pbbs_knn_intdeps  = @pbbs_knn_intdeps@
pbbs_knn_cppflags = @pbbs_knn_cppflags@
pbbs_knn_ldflags  = @pbbs_knn_ldflags@
pbbs_knn_libs     = @pbbs_knn_libs@

pbbs_knn_srcs = \
	pbbs-knn-check.cc

pbbs_knn_clang_srcs = \
	pbbs-knn-scalar.cc \
  pbbs-knn-xloops.cc \

pbbs_knn_install_prog_srcs = \
	pbbs-knn.cc \

pbbs_knn_native_srcs = \

pbbs_knn_native_install_prog_srcs = \
	pbbs-knn-check.cc

# Explicit LLVM bitcode files

pbbs_knn_llc_srcs = \

pbbs_knn_llc_lls = \

#-------------------------------------------------------------------------
# Rules for running benchmarks with --verify option
#-------------------------------------------------------------------------

pbbs_knn_verify_outs := $(patsubst %.cc, %.out, $(pbbs_knn_install_prog_srcs))
$(pbbs_knn_verify_outs) : %.out : %
	$(RUN) $(RUNFLAGS) ./$< --impl all --verify 2>&1 | tee $@

outs += $(pbbs_knn_verify_outs)
junk += $(pbbs_knn_verify_outs)
check-pbbs-knn : $(pbbs_knn_verify_outs)

#-------------------------------------------------------------------------
# Rules for running benchmarks using PISA LLVM toolchain
#-------------------------------------------------------------------------

# Note: Debug option (-g) is filtered out of the CXXFLAGS as custom LLVM
# Passes set custom debug information in the toolchain to work correctly
# and not disabling the debug option may cause them to fail.
#
# Note: ADDITIONAL_FLAGS captures the include paths to other external
# project dependencies
# Note: added _MIPS_ARCH_MAVEN define to the clang flags because some apps
# do conditional compiling based on this

PBBS_KNN_CLANG            = @pbbs_knn_clang@
PBBS_KNN_CXXFLAGS         = $(filter-out -g, $(CXXFLAGS))
PBBS_KNN_ADDITIONAL_FLAGS = $(pbbs_knn_cppflags)
PBBS_KNN_CLANG_FLAGS      = $(PBBS_KNN_CXXFLAGS) -MMD -MP -I. $(CPPFLAGS) \
                          $(PBBS_KNN_ADDITIONAL_FLAGS) -target pisael-brg -D_MIPS_ARCH_MAVEN
PBBS_KNN_LLC_FLAGS        = -O3 -march=pisael -relocation-model=static

pbbs_knn_clang_objs   := $(patsubst %.cc, %.o, $(pbbs_knn_clang_srcs))
pbbs_knn_clang_deps   := $(patsubst %.cc, %.d, $(pbbs_knn_clang_srcs))
pbbs_knn_llc_asms     := $(patsubst %.ll, %.s, $(pbbs_knn_llc_lls))
pbbs_knn_llc_objs     := $(patsubst %.s,  %.o, $(pbbs_knn_llc_asms))

ifneq ($(PBBS_KNN_CLANG),no)

$(pbbs_knn_clang_objs) : %.o : %.cc
	$(PBBS_KNN_CLANG) $(PBBS_KNN_CLANG_FLAGS) -c $<

$(pbbs_knn_llc_asms) : %.s : %.ll
	llc $(PBBS_KNN_LLC_FLAGS) $< -o $@

$(pbbs_knn_llc_objs) : %.o : %.s
	$(CC) -O3 -c $<

pbbs_knn_objs += $(pbbs_knn_clang_objs)
pbbs_knn_objs += $(pbbs_knn_llc_objs)
pbbs_knn_deps += $(pbbs_knn_clang_deps)
pbbs_knn_junk += \
  $(pbbs_knn_clang_objs) \
  $(pbbs_knn_clang_deps) \
  $(pbbs_knn_llc_asms) \
  $(pbbs_knn_llc_objs) \

else
pbbs_knn_srcs += $(pbbs_knn_clang_srcs) $(pbbs_knn_llc_srcs)
endif

#-------------------------------------------------------------------------
# Rules for native compilation of the output verifier
#-------------------------------------------------------------------------

PBBS_KNN_CXX_NATIVE       = @pbbs_knn_cxx_native@
PBBS_KNN_CXX_NATIVE_FLAGS = ${pbbs_knn_cppflags} -DNATIVE_COMPILE

pbbs_knn_clang_objs   := $(patsubst %.cc, %.o, $(pbbs_knn_clang_srcs))
pbbs_knn_clang_deps   := $(patsubst %.cc, %.d, $(pbbs_knn_clang_srcs))


pbbs_knn_native_cxx_srcs += \
								$(filter %.cc, $(pbbs_knn_native_srcs))
pbbs_knn_native_cxx_objs := \
								$(patsubst %.cc, %-native.o, $(pbbs_knn_native_cxx_srcs))
pbbs_knn_native_cxx_deps := \
								$(patsubst %.cc, %-native.d, $(pbbs_knn_native_cxx_srcs))

$(pbbs_knn_native_cxx_objs) : %-native.o : %.cc
	$(PBBS_KNN_CXX_NATIVE) $(PBBS_KNN_CXX_NATIVE_FLAGS) -o $@ -c $<

pbbs_knn_native_prog_cxx_srcs += \
								$(filter %.cc, $(pbbs_knn_native_install_prog_srcs))
pbbs_knn_native_prog_cxx_objs := \
								$(patsubst %.cc, %-native.o, $(pbbs_knn_native_prog_cxx_srcs))
pbbs_knn_native_prog_cxx_deps := \
								$(patsubst %.cc, %-native.d, $(pbbs_knn_native_prog_cxx_srcs))
pbbs_knn_native_prog_cxx_exes := \
								$(patsubst %.cc, %-native,   $(pbbs_knn_native_prog_cxx_srcs))

$(pbbs_knn_native_prog_cxx_objs) : %-native.o : %.cc
	$(PBBS_KNN_CXX_NATIVE) $(PBBS_KNN_CXX_NATIVE_FLAGS) -o $@ -c $<

$(pbbs_knn_native_prog_cxx_exes) : % : %.o $(pbbs_knn_native_cxx_objs)
	$(PBBS_KNN_CXX_NATIVE) -o $@ $^

pbbs_knn_exes += $(pbbs_knn_native_prog_cxx_exes)
pbbs_knn_prog_exes += $(pbbs_knn_native_prog_cxx_exes)

pbbs_knn_junk += \
  $(pbbs_knn_native_cxx_objs) \
	$(pbbs_knn_native_cxx_deps) \
  $(pbbs_knn_native_prog_cxx_objs) \
	$(pbbs_knn_native_prog_cxx_deps) \
	$(pbbs_knn_native_prog_cxx_exes) \


