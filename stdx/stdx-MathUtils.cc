//========================================================================
// stdx-MathUtils.cc
//========================================================================

#include "stdx-MathUtils.h"
#include "stdx-Exception.h"
#include <cmath>
#include <cstdlib>

namespace stdx {

  //----------------------------------------------------------------------
  // rand_frac
  //----------------------------------------------------------------------

  double rand_frac()
  {
    return (static_cast<double>(std::rand()-1) / (RAND_MAX));
  }

  //----------------------------------------------------------------------
  // rand_int
  //----------------------------------------------------------------------

  int rand_int( int max )
  {
    return static_cast<int>(rand_frac() * max);
  }

  //----------------------------------------------------------------------
  // round
  //----------------------------------------------------------------------

  int round( double d )
  {
    return static_cast<int>(std::floor(d+0.5));
  }

  //----------------------------------------------------------------------
  // is_pow2
  //----------------------------------------------------------------------

  bool is_pow2( uint32_t num )
  {
    if ( num == 0 )
      return false;

    return (((num-1) & num) == 0);
  }

  //----------------------------------------------------------------------
  // ceil_pow2()
  //----------------------------------------------------------------------

  uint32_t ceil_pow2( uint32_t num )
  {
    STDX_ASSERT( (num & 0x80000000) != 1 );

    if ( is_pow2(num) )
      return num;

    if ( num == 0 )
      return 1u;

    uint32_t res = 0x80000000;
    while ( (num & 0x80000000) == 0 ) {
      num = num << 1;
      res = res >> 1;
    }

    return ( res << 1 );
  }

  //----------------------------------------------------------------------
  // lg()
  //----------------------------------------------------------------------

  uint32_t lg( uint32_t num )
  {
    STDX_ASSERT( is_pow2( num ) );

    uint32_t lg_num = 0;
    while ( (num & 0x00000001) == 0 ) {
      num = num >> 1;
      lg_num++;
    }
    return lg_num;
  }

}

